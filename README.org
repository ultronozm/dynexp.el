#+title: dynexp.el: Snippets via abbrev-mode
#+author: Paul Nelson

* Overview
This package provides completion features that allow for the rapid entry of, e.g., various LaTeX constructs (environments, macros, symbols, subscripts, ...).  It does so by leveraging Emacs' familiar abbrev mechanism, extending it with a simple markup language (=<+++>=, =<++>=, =<+TAB+>=) and a suite of post-processing functions.  This approach differs from that of popular packages such as [[https://github.com/cdominik/cdlatex][CDLaTeX]] and [[https://github.com/joaotavora/yasnippet][YASnippet]] (or the built-in [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeleton-Language.html][Skeleton language]] and [[https://www.emacswiki.org/emacs/TempoMode][Tempo mode]]), which introduce their own expansion systems.

* Configuration
This package requires [[https://www.gnu.org/software/auctex/manual/auctex/Installation.html#Installation][AUCTeX]] (to carry out the macro folding), so install that first.

Download this repository, install using =M-x package-install-file= (or package-vc-install, straight, elpaca, ...), and add something like the following to your [[https://www.emacswiki.org/emacs/InitFile][init file]] (after whatever is needed to load [[https://www.gnu.org/software/auctex/manual/auctex/Installation.html#Installation][AUCTeX]]):
#+begin_src elisp
(use-package dynexp
  :demand ; but after auctex
  :bind
  (:map LaTeX-mode-map
        ("SPC" . dynexp-space)
        ("TAB" . dynexp-next))
  :config
  (with-eval-after-load 'latex
    (quietly-read-abbrev-file "~/whatever/dynexp/lisp/dynexp-abbrev.el")))
#+end_src

Replace the path with whatever the path is to the =dynexp-abbrev.el= file that comes with this package (and feel free to put that file somewhere else and modify it to your liking; see below for details on the format).

* Usage
This package makes use of Emacs's built-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][abbrevs]] feature, which expands words, called /abbrevs/, into some different text, called the /expansion/ of the abbrev.  Quoting from this most recent link:
#+begin_quote
For example, you might define =foo= as an abbrev expanding to =find outer otter=. Then you could insert =find outer otter= into the buffer by typing =f o o SPC=.
#+end_quote
To each abbrev, one can attach a /hook/ function, which is called, with no arguments, after the abbrev is replaced by its expansion; see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Abbrevs.html][this part]] of the elisp manual for details.

The main export of this package is a certain abbrev hook function =dynexp= that postprocesses the expansion.  We illustrate with three examples.

1. I use "bthm" as an abbrev for theorem environments.  When I type "bthm" in a LaTeX buffer followed by =SPC= (bound to =dynexp-space=), it expands to the following abbrev:
  #+begin_example
  <+TAB+>\begin{theorem}
  <+TAB+><+++>
  <+TAB+>\end{theorem}<++>"
  #+end_example

  The function =dynexp= postprocesses this expansion, transforming it into the following:
  #+begin_example
  \begin{theorem}
    _
  \end{theorem}<++>"
  #+end_example
  The underscore _ indicates where the cursor is positioned.  When I'm done writing the contents of the theorem, I hit =TAB= (bound to =dynexp-next=), which moves the cursor just beyond the theorem environment, like so:
  #+begin_example
  \begin{theorem}
    (Contents of my cool theorem.)
  \end{theorem}_
  #+end_example
  
2. The abbrev "zx" (easy to type on my keyboard) expands to
   #+begin_example
   $<+++>$<++>
   #+end_example
   which =dynexp= postprocesses to
   #+begin_example
   $_$<++>
   #+end_example
   After typing some inline math, I hit =TAB= to move the cursor just beyond the second dollar delimiter:
   #+begin_example
   $x=y$_
   #+end_example

3. The abbrev "mx3p" expands to
   #+begin_src example
   <+TAB+>\begin{pmatrix}
   <+TAB+><+++> & <++> & <++> \\
   <+TAB+><++> & <++> & <++> \\
   <+TAB+><++> & <++> & <++> \\
   <+TAB+>\end{pmatrix}<++>
   #+end_src
   which =dynexp= postprocesses to
   #+begin_src example
   \begin{pmatrix}
   _ & <++> & <++> \\
   <++> & <++> & <++> \\
   <++> & <++> & <++> \\
   \end{pmatrix}<++>
   #+end_src
   I can then fill in the matrix one entry at a time, using =TAB= to navigate.

The recipe is likely clear:
- =<+TAB+>= indicates where we should apply suitable indentation,
- =<+++>= is where the cursor should be positioned after the expansion, and
- =<++>= is left intact by the expansion, but used to denote "positions of interest" that are "eaten up" by =dynexp-next=.

There are a few variants of the hook function =dynexp=, e.g., =dynexp-fold=, which expands the abbreviation template and applies =TeX-fold-region= to it.

The package file =lisp/dynexp-abbrevs.el= contains a few thousand abbrevs that I've accumulated over the years.  As a base, I started with FasTeX (http://www.cds.caltech.edu/~fastex/fastex.html), specifically, the FasTeX shortcuts for Emacs released by Ari Stern.

You can create new expansion templates by modifying =lisp/dynexp-abbrevs.el=.  It's often convenient to mimic an existing expansion template.

* Auto-expansion
This package now includes an auto-expansion feature that allows certain abbrevs to be expanded automatically without the need to press =SPC=.  This may be useful for common abbreviations.

** Setup
To use this feature:

1. Enable =dynexp-auto-expand-mode= in the buffers of interest.  For instance, to enable it in your LaTeX buffers, add the following to your init file:

   #+begin_src elisp
   (add-hook 'LaTeX-mode-hook 'dynexp-auto-expand-mode)
   #+end_src

2. Customize the =dynexp-auto-expand-list= variable to include the abbrevs you want to auto-expand. For example:

   #+begin_src elisp
   (setq dynexp-auto-expand-list '("zx" "bdp" "bthm"))
   #+end_src

   This will cause the abbrevs "zx", "bdp", and "bthm" to expand automatically as soon as you finish typing them, without needing to press =SPC=.

** Usage
With =dynexp-auto-expand-mode= enabled and =dynexp-auto-expand-list= configured, simply type any abbrev included in the list. It will expand automatically when you finish typing it, saving you the extra step of pressing =SPC=.
